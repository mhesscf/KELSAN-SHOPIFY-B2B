<div id="spin-wheel-embed" aria-label="Name picker wheel">
    <style>
        #spin-wheel-embed {
            --size: 320px;
            --ring: #e5e7eb;
            --text: #111827;
            --btn-bg: #111827;
            --btn-fg: #ffffff;
            --accent: #f59e0b;
            --shadow: 0 10px 25px rgba(0,0,0,.12);
            font-family: ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, Arial;
            display: inline-block;
        }
        #spin-wheel-embed .wrap {
            display: grid;
            gap: 12px;
            justify-items: center;
            padding: 16px;
            border-radius: 16px;
            background: #fff;
            box-shadow: var(--shadow);
        }
        #spin-wheel-embed .stage {
            position: relative;
            width: var(--size);
            height: var(--size);
            display: grid;
            place-items: center;
        }
        #spin-wheel-embed .pointer {
            position: absolute;
            top: -6px;
            width: 0; height: 0;
            border-left: 14px solid transparent;
            border-right: 14px solid transparent;
            border-bottom: 18px solid var(--accent);
            filter: drop-shadow(0 2px 2px rgba(0,0,0,.2));
            z-index: 3;
        }
        #spin-wheel-embed svg { width: 100%; height: 100%; overflow: visible; }
        /* No CSS transition here anymore — WAAPI handles it */
        #spin-wheel-embed .wheel {
            transform-box: fill-box;
            transform-origin: 50% 50%;
        }
        #spin-wheel-embed .center-cap {
            fill: #fff; stroke: var(--ring); stroke-width: 4;
            filter: drop-shadow(0 2px 2px rgba(0,0,0,.1));
        }
        #spin-wheel-embed .label {
            font-size: 16px; font-weight: 700; fill: var(--text);
            text-anchor: middle; dominant-baseline: middle; user-select: none;
        }
        #spin-wheel-embed .controls { display: grid; gap: 8px; width: 100%; justify-items: center; }
        #spin-wheel-embed button {
            background: var(--btn-bg); color: var(--btn-fg); border: none;
            padding: 10px 16px; border-radius: 999px; font-weight: 700; cursor: pointer;
            transition: transform .06s ease;
        }
        #spin-wheel-embed button:active { transform: scale(.98); }
        #spin-wheel-embed button[disabled] { opacity: .5; cursor: not-allowed; }
        #spin-wheel-embed .result { min-height: 1.5em; font-weight: 800; letter-spacing: .5px; }
    </style>

    <div class="wrap">
        <div class="stage">
            <div class="pointer"></div>
            <svg viewBox="0 0 320 320">
                <circle cx="160" cy="160" r="150" fill="#fff" stroke="var(--ring)" stroke-width="6"></circle>
                <g class="wheel" id="wheel-group"></g>
                <circle cx="160" cy="160" r="36" class="center-cap"></circle>
            </svg>
        </div>
        <div class="controls">
            <button id="spin-btn" type="button">Spin</button>
            <div class="result" id="spin-result"></div>
        </div>
    </div>

    <script>
        (function () {
            // Edit this list to use 3–6 options (or more)
            const NAMES = ["10% Off", "15% Off", "20% Off", "25% Off","30% Off"];
            const COLORS = ["#93c5fd", "#fdba74", "#a7f3d0", "#fca5a5", "#fcd34d", "#c4b5fd"];

            const elWheel = document.querySelector("#spin-wheel-embed #wheel-group");
            const elBtn   = document.querySelector("#spin-wheel-embed #spin-btn");
            const elRes   = document.querySelector("#spin-wheel-embed #spin-result");

            let spinning = false;

            function polarToCartesian(cx, cy, r, deg) {
                const rad = (deg - 90) * Math.PI / 180;
                return { x: cx + r * Math.cos(rad), y: cy + r * Math.sin(rad) };
            }
            function describeArc(cx, cy, r, startDeg, endDeg) {
                const start = polarToCartesian(cx, cy, r, endDeg);
                const end   = polarToCartesian(cx, cy, r, startDeg);
                const largeArcFlag = endDeg - startDeg <= 180 ? "0" : "1";
                return `M ${cx} ${cy} L ${start.x} ${start.y} A ${r} ${r} 0 ${largeArcFlag} 0 ${end.x} ${end.y} Z`;
            }

            // Build wheel
            const cx = 160, cy = 160, R = 148;
            const sliceAngle = 360 / NAMES.length;
            for (let i = 0; i < NAMES.length; i++) {
                const start = -sliceAngle / 2 + i * sliceAngle;
                const end   = start + sliceAngle;

                const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
                path.setAttribute("d", describeArc(cx, cy, R, start, end));
                path.setAttribute("fill", COLORS[i % COLORS.length]);
                path.setAttribute("stroke", "#fff");
                path.setAttribute("stroke-width", "2");
                elWheel.appendChild(path);

                const centerAngle = start + sliceAngle / 2;
                const labelPos = polarToCartesian(cx, cy, R * 0.65, centerAngle);
                const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                text.setAttribute("x", labelPos.x.toFixed(2));
                text.setAttribute("y", labelPos.y.toFixed(2));
                text.setAttribute("class", "label");
                text.textContent = NAMES[i];
                // Radial orientation toward the center
                text.setAttribute("transform", `rotate(${centerAngle}, ${labelPos.x}, ${labelPos.y})`);
                elWheel.appendChild(text);
            }

            function spin() {
                if (spinning) return;
                spinning = true;
                elBtn.disabled = true;
                elRes.textContent = "… spinning …";

                // Randomize a bit for natural feel
                const turns = 5 + Math.floor(Math.random() * 3); // 5, 6, or 7 full turns
                const extra = Math.floor(Math.random() * 360);   // extra degrees
                const totalDeg = turns * 360 + extra;

                const duration = (Math.random() * 1 + 3.5) * 1000; // 3500–4500 ms

                // Use Web Animations API for consistent multi-spin behavior
                const animation = elWheel.animate(
                    [
                        { transform: "rotate(0deg)" },
                        { transform: `rotate(${totalDeg}deg)` }
                    ],
                    {
                        duration,
                        easing: "cubic-bezier(.12,.74,.02,1)",
                        fill: "forwards"
                    }
                );

                animation.onfinish = () => {
                    // Keep only the final remainder visually to avoid gigantic numbers
                    const remainder = totalDeg % 360;
                    elWheel.style.transform = `rotate(${remainder}deg)`;
                    animation.cancel(); // commit the inline style and clear the WAAPI state

                    // Determine winner
                    const normalized = (360 - remainder + sliceAngle / 2) % 360;
                    const index = Math.floor(normalized / sliceAngle) % NAMES.length;
                    elRes.textContent = NAMES[index].toUpperCase();

                    spinning = false;
                    elBtn.disabled = false;
                };
            }

            elBtn.addEventListener("click", spin);
        })();
    </script>
</div>
